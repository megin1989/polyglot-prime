 

/*******************************************************************************************
 * Comprehensive view of SFTP diagnostics with REJECTION and their related issues. * 
 ******************************************************************************************/
 /*
DROP VIEW IF EXISTS techbd_udi_ingress.orch_session_diagnostics_rejection CASCADE;
CREATE or REPLACE
view techbd_udi_ingress.orch_session_diagnostics_rejection AS
SELECT 
	orch_started_at,
	qe, 
	ingest_file_source, 
    ingest_file,
	issue_type, 
	issue_message, 
	issue_column, 
	issue_row, 
	invalid_value, 
	remediation, 
	session_id, 
	orch_session_issue_id 
FROM techbd_udi_ingress.orch_session_diagnostics 
WHERE disposition = 'REJECTION';
*/
/*******************************************************************************************************************************
 * Procedure to insert diagnostic logs into the Data Vault structure, specifically handling hub and satellite tables.
 * This procedure ensures that logs are captured with proper attribution and linked to the corresponding hub record.
 * It handles potential unique constraint violations in the hub table by ignoring duplicate inserts.
 *
 * @param diagnostic_id TEXT - The unique identifier for the diagnostic hub record. This ID is used to link 
 *                                  the hub and satellite records.
 * @param key TEXT - A unique business key or identifier, typically representing a specific job or process being logged.
 * @param created_by TEXT - The user or system responsible for creating the hub record.
 * @param provenance TEXT - The origin or source of the hub record (e.g., system name, application name).
 * @param diagnostic_log_level TEXT - The severity level of the diagnostic log (e.g., info, warning, error).
 * @param diagnostic_log_message TEXT - The message associated with the diagnostic log.
 * @param diagnostic_detail JSONB (nullable) - A JSON object containing detailed information about the diagnostic event.
 * @param user_id TEXT - The ID of the user associated with the diagnostic log.
 * @param status TEXT - The status of the diagnostic event (e.g., success, failure).
 * @param parent_diagnostic_log_id TEXT - The ID of the parent diagnostic log, if this log is part of a hierarchy.
 * @param hierarchy_level INT - The level of the log in the hierarchy (e.g., 0 for root logs).
 *******************************************************************************************************************************
 * Procedure Logic:
 *
 * 1. Insert the provided information into the `hub_diagnostic` table:
 *    - This represents a unique hub record for the diagnostic event, with the `hub_diagnostic_id` as the primary key.
 *    - If a record with the same `hub_diagnostic_id` already exists, the insert is ignored (`ON CONFLICT DO NOTHING`).
 *
 * 2. Insert the diagnostic log details into the `sat_diagnostic_log` table:
 *    - A new satellite record is created and linked to the corresponding hub record via the `hub_diagnostic_id`.
 *    - The satellite record contains detailed information about the diagnostic event, including log level, message, 
 *      user ID, status, and timestamps.
 *    - The `sat_diagnostic_log_id` is generated using `gen_random_uuid()` to ensure uniqueness.
 *
 * 3. Error Handling:
 *    - This procedure assumes that no additional error handling is needed for unique constraint violations on the hub table,
 *      as these are handled by the `ON CONFLICT DO NOTHING` clause.
 *
 * Usage Example:
 * ---------------
 * CALL techbd_udi_ingress.register_diagnostic_log(
 *     'unique_hub_id_123',
 *     'job_key_123',
 *     'user1',
 *     'system1',
 *     'info',
 *     'Job started successfully',
 *     'user123',
 *     'success',
 *     'parent_log_id_123',
 *     0,
 *     '{"details": "additional info"}'::jsonb,
 * );
 *******************************************************************************************************************************/


DROP PROCEDURE IF EXISTS techbd_udi_ingress.register_diagnostic_log(text, text, text, text, text, text, text, text, text, int4, jsonb);
DROP PROCEDURE IF EXISTS techbd_udi_ingress.register_diagnostic_log(text, text, text, text, text, text, text, text, text, int4, jsonb, text, text);
CREATE OR REPLACE PROCEDURE techbd_udi_ingress.register_diagnostic_log(
    diagnostic_id TEXT,
    key TEXT,
    created_by TEXT,
    provenance TEXT,
    diagnostic_log_level TEXT,
    diagnostic_log_message TEXT,
    user_id TEXT,
    status TEXT,
    parent_diagnostic_log_id TEXT,
    hierarchy_level INT,
    elaboration JSONB,
    p_tenant_id text DEFAULT NULL::text, 
    p_hub_interaction_id text DEFAULT NULL::text
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Insert into hub_diagnostic table
    INSERT INTO techbd_udi_ingress.hub_diagnostic (
        hub_diagnostic_id,
        "key",
		created_at,
        created_by,
        provenance
    ) VALUES (
        diagnostic_id,
        key,
        clock_timestamp(),
        created_by,
        provenance
    )
    ON CONFLICT (hub_diagnostic_id) DO NOTHING;  -- Avoids duplicate inserts into the hub

    -- Insert into sat_diagnostic_log table
    INSERT INTO techbd_udi_ingress.sat_diagnostic_log (
        sat_diagnostic_log_id,
        hub_diagnostic_id,
        diagnostic_log_level,
        diagnostic_log_message,
        user_id,
        status,
        parent_diagnostic_log_id,
        hierarchy_level,
        elaboration,
		created_at,
        created_by,
        provenance,
		tenant_id,
		hub_interaction_id
    ) VALUES (
        gen_random_uuid()::text,  -- Generate a unique ID for the satellite record
        diagnostic_id,
        diagnostic_log_level,
        diagnostic_log_message,
        user_id,
        status,
        parent_diagnostic_log_id,
        hierarchy_level,
        elaboration,
        clock_timestamp(),
        created_by,
        provenance,
		p_tenant_id,
		p_hub_interaction_id
    );
END $$;
